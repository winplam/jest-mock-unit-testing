const orderTotal = require('./order-total')

it('calls vatapi.com', () => {
  let isFakeFetchCalled = false
  const fakeFetch = (url) => {
    console.log('url: ' + url)
    expect(url).toBe('https://eu.vatapi.com/v2/vat-rates?rate_type=TBE')
    isFakeFetchCalled = true
    return Promise.resolve({
      json: () => Promise.resolve({
        rates: {
          standard: {
            value: 19
          }
        }
      })
    })
  }
  orderTotal(fakeFetch, {
    country: 'TBE',
    items: [
      { 'name': 'Dragon waffles', price: 20, quantity: 2 }
    ]
  }).then(result => {
    console.log('isFakeFetchCalled: ' + isFakeFetchCalled)
    expect(result).toBe(20 * 2 * 1.19)
    expect(isFakeFetchCalled).toBe(true)
  })
})

it('Quantity', () =>
  orderTotal(null, {
    items: [
      { 'name': 'Dragon candy', price: 2, quantity: 3 }
    ]
  }).then(result => {expect(result).toBe(6)}))

it('No quantity specified', () =>
  orderTotal(null, {
    items: [
      { 'name': 'Dragon candy', price: 3 }
    ]
  }).then(result => expect(result).toBe(3))
)

it('Happy path (Example 1)', () =>
  orderTotal(null, {
    items: [
      { name: 'Dragon food', price: 8, quantity: 1 },
      { name: 'Dragon cage (small)', price: 800, quantity: 1 }
    ]
  }).then(result => expect(result).toBe(808))
)

it('Happy path (Example 2)', () =>
  orderTotal(null, {
    items: [
      { name: 'Dragon collar', price: 20, quantity: 1 },
      { name: 'Dragon chew toy', price: 40, quantity: 1 }
    ]
  }).then(result => expect(result).toBe(60)))
